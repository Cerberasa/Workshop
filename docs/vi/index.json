[{"uri":"https://cerberasa.github.io/Workshop/vi/","title":" 1.Giới thiệu","tags":[],"description":"","content":"Tổng quan Trong bối cảnh hạ tầng điện toán đám mây phát triển nhanh chóng, các doanh nghiệp và đội ngũ phát triển phần mềm ngày càng quan tâm đến việc tối ưu hiệu năng, chi phí vận hành, và tính bền vững về năng lượng.\nHai kiến trúc phần cứng chủ đạo hiện nay trên AWS là:\n x86 (Intel/AMD): vốn là tiêu chuẩn truyền thống, có hệ sinh thái phần mềm rộng, khả năng tương thích tốt với ứng dụng legacy. ARM (AWS Graviton): sử dụng tập lệnh RISC, tối ưu cho hiệu suất trên mỗi watt, tiêu thụ điện năng thấp hơn và chi phí vận hành thấp hơn tới 40% so với x86 trong nhiều trường hợp.  Tuy nhiên, triển khai và quản lý ứng dụng cho cả hai kiến trúc cùng lúc thường gặp khó khăn:\n Cần build image riêng cho mỗi kiến trúc. Cần môi trường kiểm thử đa kiến trúc. Cần pipeline tự động để tránh lỗi thủ công và tiết kiệm thời gian.  Workshop này hướng dẫn bạn xây dựng CI/CD pipeline multi-architecture để triển khai ứng dụng mẫu trên cả ARM và x86 một cách tự động Kết quả thu được sẽ giúp bạn đưa ra quyết định chuyển đổi workload sang ARM hay duy trì trên x86 dựa trên dữ liệu thực nghiệm thay vì giả định.\n Hệ thống bao gồm các thành phần chính:  Amazon EC2 (t4g.micro – ARM, t3.micro – x86): cung cấp máy chủ ảo trên hai kiến trúc khác nhau để triển khai và kiểm thử ứng dụng. Amazon ECR (Elastic Container Registry): lưu trữ Docker image đa kiến trúc (multi-arch) để dễ dàng phân phối cho cả ARM và x86. AWS IAM (Identity and Access Management): quản lý quyền truy cập và bảo mật cho pipeline, ECR và EC2. AWS VPC (Virtual Private Cloud): cung cấp mạng riêng ảo, bảo vệ môi trường triển khai và kiểm thử. AWS CodePipeline / CodeBuild: dịch vụ CI/CD native của AWS để tự động build, test và deploy image đa kiến trúc. AWS ECR Multi-Arch Build Support: thay thế Docker Buildx, sử dụng dịch vụ AWS native để build image cho ARM và x86 từ cùng một codebase.   Hệ thống được thiết kế để:  Tiết kiệm chi phí vận hành tới 40% khi sử dụng ARM cho workload phù hợp. Tự động hóa quy trình build và deploy cho cả hai kiến trúc, giảm lỗi thủ công và tiết kiệm thời gian. Đảm bảo tính tương thích thông qua kiểm thử đa kiến trúc trước khi đưa vào môi trường production. So sánh chi phí và năng lượng tiêu thụ để tối ưu chiến lược triển khai.   Multi-architecture deployment giúp bạn tận dụng tối đa ưu điểm của từng nền tảng phần cứng. ARM phù hợp với workload tối ưu hóa chi phí và tiết kiệm năng lượng, trong khi x86 đảm bảo tính tương thích với phần mềm legacy và môi trường đã ổn định.\n  Nội dung chính  Giới thiệu Chuẩn bị môi trường AWS (EC2 ARM \u0026amp; x86) Chuẩn bị repository mã nguồn và Clone repo mẫu Cài đặt công cụ và cấu hình AWS CLI, CDK Triển khai pipeline bằng CDK Deploy ứng dụng lên ARM và x86 EC2 Dọn dẹp tài nguyên  "},{"uri":"https://cerberasa.github.io/Workshop/vi/introduction/","title":" 1.Giới thiệu","tags":[],"description":"","content":"Tổng quan Trong bối cảnh hạ tầng điện toán đám mây phát triển nhanh chóng, các doanh nghiệp và đội ngũ phát triển phần mềm ngày càng quan tâm đến việc tối ưu hiệu năng, chi phí vận hành, và tính bền vững về năng lượng.\nHai kiến trúc phần cứng chủ đạo hiện nay trên AWS là:\n x86 (Intel/AMD): vốn là tiêu chuẩn truyền thống, có hệ sinh thái phần mềm rộng, khả năng tương thích tốt với ứng dụng legacy. ARM (AWS Graviton): sử dụng tập lệnh RISC, tối ưu cho hiệu suất trên mỗi watt, tiêu thụ điện năng thấp hơn và chi phí vận hành thấp hơn tới 40% so với x86 trong nhiều trường hợp.  Tuy nhiên, triển khai và quản lý ứng dụng cho cả hai kiến trúc cùng lúc thường gặp khó khăn:\n Cần build image riêng cho mỗi kiến trúc. Cần môi trường kiểm thử đa kiến trúc. Cần pipeline tự động để tránh lỗi thủ công và tiết kiệm thời gian.  Workshop này hướng dẫn bạn xây dựng CI/CD pipeline multi-architecture để triển khai ứng dụng mẫu trên cả ARM và x86 một cách tự động Kết quả thu được sẽ giúp bạn đưa ra quyết định chuyển đổi workload sang ARM hay duy trì trên x86 dựa trên dữ liệu thực nghiệm thay vì giả định.\n Hệ thống bao gồm các thành phần chính:  Amazon EC2 (t4g.micro – ARM, t3.micro – x86): cung cấp máy chủ ảo trên hai kiến trúc khác nhau để triển khai và kiểm thử ứng dụng. Amazon ECR (Elastic Container Registry): lưu trữ Docker image đa kiến trúc (multi-arch) để dễ dàng phân phối cho cả ARM và x86. AWS IAM (Identity and Access Management): quản lý quyền truy cập và bảo mật cho pipeline, ECR và EC2. AWS VPC (Virtual Private Cloud): cung cấp mạng riêng ảo, bảo vệ môi trường triển khai và kiểm thử. AWS CodePipeline / CodeBuild: dịch vụ CI/CD native của AWS để tự động build, test và deploy image đa kiến trúc. AWS ECR Multi-Arch Build Support: thay thế Docker Buildx, sử dụng dịch vụ AWS native để build image cho ARM và x86 từ cùng một codebase.   Hệ thống được thiết kế để:  Tiết kiệm chi phí vận hành tới 40% khi sử dụng ARM cho workload phù hợp. Tự động hóa quy trình build và deploy cho cả hai kiến trúc, giảm lỗi thủ công và tiết kiệm thời gian. Đảm bảo tính tương thích thông qua kiểm thử đa kiến trúc trước khi đưa vào môi trường production. So sánh chi phí và năng lượng tiêu thụ để tối ưu chiến lược triển khai.   Multi-architecture deployment giúp bạn tận dụng tối đa ưu điểm của từng nền tảng phần cứng. ARM phù hợp với workload tối ưu hóa chi phí và tiết kiệm năng lượng, trong khi x86 đảm bảo tính tương thích với phần mềm legacy và môi trường đã ổn định.\n  Nội dung chính  Giới thiệu Chuẩn bị môi trường AWS (EC2 ARM \u0026amp; x86) Chuẩn bị repository mã nguồn và Clone repo mẫu Cài đặt công cụ và cấu hình AWS CLI, CDK Triển khai pipeline bằng CDK Deploy ứng dụng lên ARM và x86 EC2 Dọn dẹp tài nguyên  "},{"uri":"https://cerberasa.github.io/Workshop/vi/ec2/","title":"2. Chuẩn bị môi trường AWS (EC2 ARM &amp; x86)","tags":[],"description":"","content":"Mục tiêu Tạo hai máy chủ EC2 với kiến trúc ARM và x86 để phục vụ việc triển khai và kiểm thử.\nBao gồm cả việc cấu hình VPC và Subnet nếu chưa có sẵn.\n 2.1 Truy cập AWS Management Console  Mở trình duyệt và truy cập: https://aws.amazon.com/console/ Đăng nhập bằng tài khoản AWS của bạn.   2.2 Kiểm tra hoặc tạo mới VPC \u0026amp; Subnet 2.2.1 Kiểm tra VPC hiện có  Trong AWS Console, vào dịch vụ VPC: https://console.aws.amazon.com/vpc/ Chọn Your VPCs ở menu bên trái. Nếu đã có VPC default → có thể dùng luôn. Nếu muốn tạo mới → làm theo bước 2.2.2.  2.2.2 Tạo VPC mới  Nhấn Create VPC. Chọn VPC only. Đặt tên (VD: workshop-vpc). IPv4 CIDR block: 10.0.0.0/16 Giữ nguyên các tuỳ chọn khác → Create VPC.   2.2.3 Tạo Subnet cho VPC mới  Vào mục Subnets → Create subnet. Chọn VPC vừa tạo (workshop-vpc). Đặt tên subnet (VD: workshop-subnet-public). Chọn Availability Zone (VD: ap-southeast-1a). IPv4 CIDR block: 10.0.1.0/24 Create subnet.  Chỉnh Subnet sang chế độ Auto-assign Public IPv4:  Chọn subnet → Actions → Edit subnet settings Tick vào Enable auto-assign public IPv4 address → Save.      2.3 Tạo EC2 ARM (AWS Graviton)  Vào EC2 → Launch Instance: https://console.aws.amazon.com/ec2/ Name: ec2-arm Chọn AMI: Amazon Linux 2 ARM 64-bit (Graviton). Chọn Instance Type: t4g.nano  Key pair: Chọn hoặc tạo mới. Network settings:  VPC: Chọn workshop-vpc (hoặc VPC mặc định nếu dùng default). Subnet: Chọn workshop-subnet-public (hoặc subnet default). Auto-assign Public IP: Enable. Security Group: Tạo mới hoặc dùng sẵn, mở port 22 (SSH).   Nhấn Launch Instance.    2.4 Tạo EC2 x86  Vào EC2 → Launch Instance. Name: ec2-x86 Chọn AMI: Amazon Linux 2 x86 64-bit. Chọn Instance Type: t3.micro Key pair: Chọn hoặc tạo mới. Network settings:  VPC: Chọn workshop-vpc . Subnet: Chọn workshop-subnet-public. Auto-assign Public IP: Enable. Security Group: Mở port 22 (SSH).   Nhấn Launch Instance.   2.5 Kết quả Bạn đã có 2 máy chủ:\n EC2 ARM: phục vụ kiểm thử kiến trúc ARM. EC2 x86: phục vụ kiểm thử kiến trúc x86.   2.6 Tạo ECS Cluster thủ công trên AWS Console  Vào dịch vụ Amazon ECS: https://console.aws.amazon.com/ecs/. Nhấn Create Cluster. Cluster name: nhập tên (VD: MyManualEC2Cluster). Ở phần Infrastructure:  Chọn Amazon Fargate(serverless).   Các tuỳ chọn khác để mặc định → Create.   2.7 Cài ECS Agent và gắn EC2 vào Cluster Lặp lại các bước sau cho cả EC2 ARM và EC2 x86.\nBước 1: SSH vào EC2\nssh -i your-key.pem ec2-user@\u0026lt;Public_IP\u0026gt; Bước 2: Cài ECS Agent\nsudo amazon-linux-extras enable ecs sudo yum install -y ecs-init Bước 3: Cấu hình tên Cluster\necho \u0026#34;ECS_CLUSTER=MyManualEC2Cluster\u0026#34; | sudo tee -a /etc/ecs/ecs.config  Thay MyManualEC2Cluster bằng tên cluster bạn đã tạo.\n Bước 4: Khởi động ECS Agent\nsudo systemctl enable --now ecs  2.8 Kiểm tra EC2 đã join cluster  Vào AWS Console → ECS → Clusters → chọn MyManualEC2Cluster → tab ECS Instances. Bạn sẽ thấy 2 EC2 (ARM và x86) xuất hiện nếu ECS Agent chạy thành công.  Lưu ý:\n EC2 phải gắn IAM Role có quyền AmazonEC2ContainerServiceforEC2Role. Nếu chưa có:  Tạo role mới với policy AmazonEC2ContainerServiceforEC2Role. Gắn role đó vào EC2 qua Actions → Security → Modify IAM Role.   Security Group của EC2 phải mở port 22 (SSH) và các port dịch vụ bạn muốn chạy.  "},{"uri":"https://cerberasa.github.io/Workshop/vi/clone/","title":"3. Chuẩn bị repository mã nguồn và Clone repo mẫu","tags":[],"description":"","content":"Mục tiêu Clone repository mẫu của AWS để lấy sẵn mã nguồn ứng dụng và pipeline CI/CD multi-architecture.\n 3.1 Clone repository mẫu  Truy cập link repo:\nhttps://github.com/aws-samples/aws-multiarch-container-build-pipeline   3.2 Kiểm tra cấu trúc repository   Clone repo về máy:\ngit clone https://github.com/aws-samples/aws-multiarch-container-build-pipeline.git cd aws-multiarch-container-build-pipeline   "},{"uri":"https://cerberasa.github.io/Workshop/vi/cli-cdk/","title":"4. Cài đặt công cụ và cấu hình AWS CLI, CDK","tags":[],"description":"","content":"Mục tiêu Cài đặt AWS CLI, cấu hình credentials, cài Node.js/npm (nếu cần) và cài AWS CDK để chuẩn bị triển khai pipeline bằng CDK.\n4.1 Cài đặt AWS CLI (AWS CLI v2) \u0026amp; kiểm tra macOS (Homebrew) brew install awscli Linux (x86_64) curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install Linux (ARM aarch64) curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip\u0026#34; -o \u0026#34;awscliv2_aarch64.zip\u0026#34; unzip awscliv2_aarch64.zip sudo ./aws/install Windows Tải MSI installer từ: https://aws.amazon.com/cli/\nHoặc dùng Chocolatey:\nchoco install awscli Kiểm tra aws --version # ví dụ: aws-cli/2.x.x Python/3.x ... 4.2 Cấu hình AWS credentials (aws configure)  Gợi ý bảo mật: Tạo một IAM user riêng cho workshop với quyền programmatic access. Trong demo nhanh có thể dùng AdministratorAccess, nhưng trong production nên dùng least-privilege.\n  Tạo IAM User trên AWS Console https://aws.amazon.com/console/ → IAM → Users → Create user  Chọn Programmatic access\n Gán policy phù hợp  Lưu Access Key ID và Secret Access Key    Trên máy local (cấu hình credentials):  aws configure # Nhập lần lượt: # AWS Access Key ID [None]: \u0026lt;ACCESS_KEY_ID\u0026gt; # AWS Secret Access Key [None]: \u0026lt;SECRET_ACCESS_KEY\u0026gt; # Default region name [None]: ap-southeast-1 # Default output format [None]: json Kiểm tra:  aws sts get-caller-identity # Trả về: UserId, Account, Arn 3.3 Cài AWS CDK \u0026amp; kiểm tra # Cài CDK toàn cục npm install -g aws-cdk # Kiểm tra phiên bản cdk --version 4.4 CDK bootstrap (chuẩn bị môi trường) Chạy cdk bootstrap ít nhất một lần cho account/region để CDK tạo S3 bucket và các resources hỗ trợ deploy.\n# Gán region nếu muốn set AWS_REGION=ap-southeast-1 # Khởi tạo môi trường bootstrap (mặc định) cdk bootstrap aws://%ACCOUNT_ID%/%AWS_REGION% "},{"uri":"https://cerberasa.github.io/Workshop/vi/cdk-pipeline/","title":"5. Triển khai pipeline bằng CDK","tags":[],"description":"","content":"Mục tiêu Triển khai stack CDK để tạo các dịch vụ AWS cần thiết cho pipeline, bao gồm:\n CodePipeline (tự động build \u0026amp; deploy) CodeBuild (build image đa kiến trúc) ECR (Elastic Container Registry) (lưu trữ image) IAM Roles \u0026amp; Policies (quyền truy cập cho pipeline và build) S3 Bucket (lưu artifact của pipeline) KMS Key (mã hóa S3 bucket) ECS Cluster (chạy container) CloudWatch Logs (lưu log build và ECS) Security Groups (mở port cho ECS nếu cần) CloudFormation Stacks (quản lý toàn bộ hạ tầng)    5.1 Thiết lập biến môi trường Trên Windows PowerShell:\n$env:CODESTAR_CONNECTION_ARN=\u0026#34;arn:aws:codestar-connections:ap-southeast-1:\u0026lt;account_id\u0026gt;:connection/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34; $env:AWS_REGION=\u0026#34;ap-southeast-1\u0026#34; Trên macOS / Linux:\nexport CODESTAR_CONNECTION_ARN=\u0026#34;arn:aws:codestar-connections:ap-southeast-1:\u0026lt;account_id\u0026gt;:connection/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34; export AWS_REGION=\u0026#34;ap-southeast-1\u0026#34;  5.2 Kiểm tra synth trước khi deploy Chuyển vào thư mục cdk của repo và cài dependencies nếu cần:\ncd aws-multiarch-container-build-pipeline # nếu TypeScript npm install # hoặc Python # python3 -m venv .venv # source .venv/bin/activate # pip install -r requirements.txt Chạy synth để kiểm tra CloudFormation template:\ncdk synth Nếu cdk synth thành công, tiếp tục deploy.\n 5.3 Chạy deploy # từ thư mục cdk cdk deploy MultiArchECSPipelineDemo  CDK sẽ hiển thị các thay đổi và hỏi xác nhận (y/n). Pipeline sẽ tự động kết nối tới GitHub qua CodeStar Connection mà bạn đã tạo. Lưu ý: Khi deploy, AWS sẽ tạo tất cả dịch vụ đã liệt kê ở mục 4.5, không bao gồm ALB và EC2 (vì đã bỏ), nên chi phí thấp hơn.   5.4 Kiểm tra sau deploy  CodePipeline → kiểm tra pipeline, trạng thái từng stage. CodeBuild → kiểm tra project và logs (nếu pipeline đã chạy build). ECR → kiểm tra repository (sau khi build lần đầu, image sẽ xuất hiện). ECS → kiểm tra cluster \u0026amp; service. S3 Bucket → xem artifact pipeline. KMS Key → kiểm tra mã hóa dữ liệu.  "},{"uri":"https://cerberasa.github.io/Workshop/vi/deploy/","title":"6. Deploy ứng dụng lên EC2 ARM &amp; x86","tags":[],"description":"","content":"Mục tiêu Triển khai image multi-architecture từ ECR và chạy container trên hai EC2 instances (ARM Graviton và x86).\nBao gồm: chạy thủ công, xử lý lỗi port, kiểm tra container, mở port Security Group, và giữ container chạy ổn định.\n 6.1 Chuẩn bị trên cả 2 EC2  Đã cài Docker (Amazon Linux 2 hoặc Ubuntu). EC2 có outbound internet hoặc quyền truy cập ECR qua VPC endpoint. EC2 có IAM role cho phép pull từ ECR (ecr:GetAuthorizationToken, ecr:BatchGetImage, \u0026hellip;). Đảm bảo Security Group mở port 80 hoặc port bạn muốn public (ví dụ 8080).   6.2 Biến môi trường (trên EC2 hoặc local) export AWS_REGION=ap-southeast-1 export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) export ECR_REPO=\u0026#34;$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/multiarch-demo\u0026#34; export IMAGE_TAG=\u0026#34;latest\u0026#34;  6.3 Đăng nhập ECR aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com  6.4 Pull \u0026amp; chạy container 1. Dừng container cũ nếu có docker ps docker stop myapp || true docker rm myapp || true 2. Pull image docker pull $ECR_REPO:$IMAGE_TAG 3. Chạy container docker run -d --restart unless-stopped --name myapp -p 80:8080 $ECR_REPO:$IMAGE_TAG 4. Nếu bị lỗi port đã dùng docker: Error response from daemon: driver failed programming external connectivity on endpoint ... : Bind for 0.0.0.0:8080 failed: port is already allocated.\r=\u0026gt; Cách xử lý:\nsudo netstat -tulpn | grep 8080 # Xem tiến trình chiếm port docker stop \u0026lt;container_id\u0026gt; docker rm \u0026lt;container_id\u0026gt; # Hoặc đổi port mapping docker run -d --restart unless-stopped --name myapp -p 8081:8080 $ECR_REPO:$IMAGE_TAG  6.5 Kiểm tra container docker ps docker logs myapp --tail 50 docker exec -it myapp uname -m # Kiểm tra kiến trúc: aarch64 hoặc x86_64  6.6 Mở port trên Security Group  Vào AWS Console → EC2 → Security Groups của instance. Thêm inbound rule:  Type: HTTP (hoặc Custom TCP) Port: 80 hoặc 8080 Source: 0.0.0.0/0 (hoặc IP bạn muốn cho phép)   Lưu và thử truy cập:  curl http://\u0026lt;EC2_PUBLIC_IP\u0026gt;:80  6.7 Deploy song song trên ARM \u0026amp; x86  Chạy các bước trên lần lượt trên mỗi EC2.  Ví dụ:\nINSTANCE_IDS=\u0026#34;i-x86 i-arm\u0026#34; aws ssm send-command --instance-ids $INSTANCE_IDS --document-name \u0026#34;AWS-RunShellScript\u0026#34; --comment \u0026#34;Deploy multiarch\u0026#34; --parameters commands=\u0026#34;aws ecr get-login-password --region $AWS_REGION| docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com \u0026amp;\u0026amp; docker pull $ECR_REPO:$IMAGE_TAG\u0026amp;\u0026amp; docker stop myapp || true \u0026amp;\u0026amp; docker rm myapp || true \u0026amp;\u0026amp; docker run -d --restart unless-stopped --name myapp -p 80:8080 $ECR_REPO:$IMAGE_TAG\u0026#34; "},{"uri":"https://cerberasa.github.io/Workshop/vi/cleanup/","title":"7. Dọn dẹp tài nguyên","tags":[],"description":"","content":"Mục tiêu Dọn dẹp nhanh và an toàn các tài nguyên đã tạo cho workshop, tránh phát sinh chi phí ngoài ý muốn.\n Trước khi xóa: sao lưu mọi báo cáo / logs quan trọng. Xác nhận account và region đúng.\n  7.1 Kiểm tra tài khoản \u0026amp; region aws sts get-caller-identity aws configure get region  7.2 triển khai bằng CDK cd aws-multiarch-container-build-pipeline/example/ecs-pipeline cdk list cdk destroy --all  CDK sẽ xóa resources theo đúng thứ tự dependency. Nếu gặp lỗi (ví dụ S3 bucket không rỗng), vào CloudFormation Console -\u0026gt; Events để xem chi tiết.   7.3 Dừng / terminate EC2 instances 7.3 Xóa S3 buckets 7.3 Xóa ECR repository 7.3 Xóa IAM roles "},{"uri":"https://cerberasa.github.io/Workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://cerberasa.github.io/Workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]